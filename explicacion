**********************BASE DE DATOS - SUPABASE

1Ô∏è‚É£ Reg√≠strate y Crear un proyecto en Supabase.
Reg√≠strate en https://supabase.com/

A. sign up -> correo || GitHub -> Check your email to confirm-> 

B. Te redirecciona al dashboard de SupaBase, pestana New organization -> 
New organization: acepta los valores defaults y click en "create organization"

C. Create a new project -> Rellena: Database Password y Region (South America), 
acepta los demas valores defaults y click en "create new project"

D. En Project API copia los siguientes valores (esta en el 1er icono "Project Overview"), 
‚≠êcopia estos secretos, porque seran las credenciales usadas en el backend para 
conectarte a las tablas que crees en este proyecto: 
‚úÖProject URL: https://zqgdtbocblpyjdvcyqhp.supabase.co
‚úÖAPI Key: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIs...
MIRAR (IMG 1)
para la conexi√≥n b√°sica y las operaciones comunes desde un backend de Node.js, 
la combinaci√≥n de la Project URL y la anon public API Key es la forma est√°ndar y segura.

‚≠ê‚≠ê‚≠êüß†üëÄ6Ô∏è‚É£En el proyecto backend, crearas el archivo .env y pega esos datos secretos, que son la llave para 
conectar la BBDD Supa con nuestro Backend, y desde alla acceder a la data. Estas variables de entorno seran usadas 
como parametron para crear un ClientSupa que representa una promesa (especie de fetch) que trae la data de la 
BD para ser servida por el backend.
üö´‚ùåüö´‚ùåüö©üö©üö©No uses la clave service_role en el frontend: Esta clave tiene permisos totales y debe mantenerse s
egura en el backend. En el frontend solo usa la clave anon (que tiene permisos limitados y est√° sujeta a las pol√≠ticas RLS).



2Ô∏è‚É£Crear la tabla usuarios
En el panel izquierdo -> "Table Editor" ->  + new table ->  nombre a la tabla: "usuarios" -> 
escroll down -> click sobre "add column": llena las casillas para dar nombre y establecer el TDD 
de la columna, hazlo tantas columnas tenga tu tabla, ejemplo: nombre, edad, email, foto, aceptacion y genero (la columna id, se crea automaticamente) ->   save. 
MIRAR (IMG 2)


3Ô∏è‚É£ Inserta registros en la tabla que has creeado -> insert -> insert row
MIRAR (IMG 3)


üß†‚≠ê Puedes hacerlo tambien en el SQL Editor
‚úèÔ∏è
INSERT INTO usuarios (nombre, edad, email, foto, aceptacion, genero)
VALUES (
  'Karla Rojas', 
  33,
  'ka@gmail.com', 
  'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTj62bw4TZh2Tdbt269A3qdB2Bk6yxwOpxeLw&s', 
  12, 
  true
);




4Ô∏è‚É£Click sobre: Add RLS Policy
Configura pol√≠ticas de Row Level Security (RLS) para la tabla. Por defecto, 
Supabase bloquea todas las operaciones hasta que definas pol√≠ticas expl√≠citas.

Paso 1: Habilitar RLS en la tabla usuarios (si no est√° habilitado)
Ejecuta este SQL en el SQL Editor de Supabase:

‚úèÔ∏è
ALTER TABLE usuarios ENABLE ROW LEVEL SECURITY; 
click sobre "Run CTRL"
Asegurate de obtener el mensaje de exito: "Success. No rows returned"
MIRAR (IMG 4 y 5)

Paso 2: Crear pol√≠ticas para permitir el acceso desde tu backend
Pol√≠tica para SELECT (leer usuarios)
Permite que tu backend obtenga todos los usuarios usando la clave de servicio (service key):
Tal y como lo hiciste en el paso anterior, ejecuta este SQL en el SQL Editor de Supabase y Asegurate de 
obtener el mensaje de exito: "Success. No rows returned":
‚úèÔ∏è 
CREATE POLICY "Allow public select" ON usuarios
FOR SELECT
TO anon
USING (true);


üí°RLS se activa por tabla, ya deberias tener la tuya activa en la tabla usuarios. 
Cada tabla puede tener sus propias pol√≠ticas de seguridad. No existe un interruptor 
global para activar RLS en todo el proyecto. Esto te permite controlar el acceso de forma granular 
y segura seg√∫n las necesidades espec√≠ficas de cada conjunto de datos.





**************************BACKEND - SERVIDOR WEB.

üß†ü§ØNECESITAS node.js
‚ÅâÔ∏èüôãüèΩ‚Äç‚ôÄÔ∏ècomo se si ya tengo node en mi SO, ejecuta en la terminal:
node -v
npm -v

üö´‚ùåSi te aparece un error, debes instalarlo: Ve a la p√°gina oficial de Node.js: https://nodejs.org/
Descarga e instala la versi√≥n LTS (Long Term Support), que es la recomendada para la mayor√≠a de los usuarios.
Para verificar que Node.js y npm est√°n instalados, abre tu terminal o l√≠nea de comandos y ejecuta:
node -v
npm -v


1Ô∏è‚É£Crea una carpeta para tu proyecto.
2Ô∏è‚É£Inicializar el proyecto. Ejecuta en la terminal el comando:  npm init -y
Se creara el archivo¬†"package.json", que contiene los siguientes elementos:
	‚úÖ"name": "backend-usuarios",
	‚úÖ"version": "1.0.0",
	‚úÖ"main": "index.js", ->  || app.js || server.js, el nombre de tu archivo principal
	‚ûï"type":"module", -> Add esto para usar ES6 default (import/export), deja de usar .mjs
	‚úÖ"scripts": {
    ...
     ‚ûï"start": "node index.js" -> el mismo que key "main", sera necesario para cuando desplegemos el proyecto, 
     nos pediren el script de arranque
  } 
	‚åödependencies:{}
	‚åödevDependencies:{} ->  Usando el indicador -D 
	‚åö...

3Ô∏è‚É£Instalamos los m√≥dulos o paquetes de los cuales dependera nuestro proyecto, como: 

npm i express
npm install cors   -> evitar problemas con los origines entre front y back
npm install @supabase/supabase-js
npm install dotenv -> para leer las variables de entorno, los secretos de las APIS

La primera instalacion creara: 
‚úÖnode_modules/      ->üí°üëÄüö©Incluise en .gitignore
‚úÖpackage-lock.json
üí°üö©si hay problema con package.json -> overwrite -> otra vez install dependences

üè≥Ô∏èüè≥Ô∏èüè≥Ô∏èFalto esto!!
4Ô∏è‚É£Crea los siguientes archivos en la ra√≠z de tu proyecto (donde est√° tu package.json).
index.js 
‚úÖ.gitignore
‚úÖ.env                ->üí°üëÄüö©Incluise en .gitignore
‚úÖsupabaseClient.js
üè≥Ô∏èüè≥Ô∏èüè≥Ô∏èFalto esto!!

*********************5Ô∏è‚É£ En index.js: creaci√≥n de servidor web con el framework express.js
//? Importar: express y cors, crea app con express() y usalos:
const PORT = 3000
const app = express()
app.use(express.json()); // Parsear JSON en las peticiones
app.use(cors()); // Habilitar CORS para todos los or√≠genes
app.get('/usuarios',  async (req, res) =>{})
app.listen(PORT, ()=>{ log()}) 
-> ejecuta: nodemon index.js

üß†ü§Ønodemon: Es √∫til para desarrollo, al expiar los archivos y hacer que el servidor se 
reinicie cuando cambien. 
‚ÅâÔ∏èüôãüèΩ‚Äç‚ôÄÔ∏ècomo se si ya tengo nodemon, ejecuta en la terminal:
nodemon -v

Si no lo tienes, instalalo.
Instalacion: instala nodemon globalmente te permite usarlo en cualquier proyecto 
sin tener que instalarlo repetidamente.
‚úèÔ∏è
npm install -g nodemon -> El -g significa "global

Una vez instalado, en lugar de ejecutar tu aplicaci√≥n con node lo haces con nodemon, asi:
üö´node index.js,    -> üëÄüè≥Ô∏èSeguira siendo tu script default, para desplegar.
‚úÖnodemon index.js


********************6Ô∏è‚É£En supabaseClient.js: Configurar el cliente en tu backend.
// supabaseClient.js
import dotenv from 'dotenv'; //todo: add esto
dotenv.config();//todo: add esto
import { createClient } from '@supabase/supabase-js'
const supabaseUrl = 'https://flrhaoijvzluodziysoq.supabase.co'
const supabaseKey = process.env.SUPABASE_KEY
export const supabase = createClient(supabaseUrl, supabaseKey)

********************7Ô∏è‚É£En .env 
SUPABASE_KEY=eyJhbGciOiJIUzI1NiIsInR5...

********************8Ô∏è‚É£Vuelve al index.js consume y usa las tablas de supabase
import { supabase } from './supabaseClient.js' //****AQUIIIII!!*****
import express from "express";
import cors from 'cors';

const app = express()
const PORT = 3000

app.use(express.json()); // Parsear JSON en las peticiones
app.use(cors()); // Habilitar CORS para todos los or√≠genes


app.get('/usuarios', async (req, res) => {
    const { data, error } = await supabase //****AQUIIIII!!*****
      .from('usuarios')
      .select('*')  // Selecciona todas las columnas
  
    if (error) {
      console.error('Error al obtener usuarios:', error)
      return res.status(500).send('Error al obtener usuarios')
    }
  
    res.json(data) // Env√≠a los usuarios como JSON
  })

app.listen(PORT, ()=>{
    console.log(`Servidor corriendo en http://localhost:${PORT}`);
})

üí°Explicaci√≥n: 
upabase.from('usuarios').select('*') hace una consulta SELECT a la tabla usuarios en tu base de datos 
Supabase. Si hay un error, responde con c√≥digo 500 y un mensaje. Si todo va bien, responde con los datos en formato JSON.



********************9Ô∏è‚É£En .gitignore
# Environment variables
.env
...
# Node.js dependencies
node_modules/
...
 








######################## ENDPOINTS: GET/ID, POST, PUT Y DELETE.
1. CODIGO EN GET/ID EN BACKEND.
//Obtener usuario por ID: https://supabase.com/docs/reference/javascript/using-filters
//TODO: Obtener usuario por ID:  API Docus -> tables & views -> Read rows -> Filtering ->  // Filters .eq('column', 'Equal to')
app.get("/usuarios/:id", async (req, res) => {
    const id = parseInt(req.params.id)
   const {data, error} = await supabase.from('usuarios').select('*').eq('id', id).single()
    if(error) return res.status(500).json({error:'Error la obtener al usuario, BACK'})
    if(!data) return res.status(404).json({error:'Error para encontrar al usuario, BACK'})
    res.json(data)
})


2. CODIGO EN POST EN BACKEND.
//TODO: Crear nuevo usuario: API Docus -> tables & views -> Insert a row
app.post("/usuarios", async (req, res )=> {
    const usuario = req.body
     
    if( //*Si el frontend env√≠a expl√≠citamente null, tu backend lo aceptar√≠a y enviaria a la BBDD. Validar el client.body
        !usuario.nombre ||
        !usuario.email ||
        !usuario.foto ||
        usuario.edad === undefined ||       // !0 es true y eso har√≠a fallar la validaci√≥n err√≥neamente.
        usuario.aceptacion === undefined || //!  usuario.edad === undefined o usuario.edad == null (detecta null o undefined).
        usuario.genero === undefined
    ) return res.status(400).json({error:'Faltan datos para hacer post de usuario, BACK'})

    const {data, error} = await supabase.from('usuarios').insert([{...usuario}]).select().single() //*Enviamos y lo recuperamos

    if(error) return res.status(500).json({error:'Error al crear/postear nuevo usario, BACK'})

    res.json(data)
})


3. CODIGO EN PUT EN BACKEND.
// Actualizar usuario por ID: API Docus -> tables & views -> Update rows
app.put("/usuarios/:id", async (req, res)=> {
  const id =  parseInt(req.params.id)
  const usuario = req.body

    if( //*Si el frontend env√≠a expl√≠citamente null, tu backend lo aceptar√≠a y enviaria a la BBDD. Validar el client.body
        usuario.nombre === undefined &&
        usuario.email === undefined &&
        usuario.foto === undefined &&
        usuario.genero === undefined &&
        usuario.aceptacion === undefined && 
        usuario.edad === undefined
    ) return res.status(400).json({error: 'Almenos un campo debe ser enviado para actualizar/put'})
    
    //*Creamos el Obj a enviar para actualizar el resgistro del ID.
    const camposActualizar = {}
    if(usuario.nombre !== undefined) camposActualizar.nombre = usuario.nombre;
    if(usuario.edad !== undefined && usuario.edad !== null)  camposActualizar.edad = usuario.edad;
    if(usuario.email !== undefined) camposActualizar.email = usuario.email;
    if(usuario.foto !== undefined) camposActualizar.foto = usuario.foto;
    if(usuario.aceptacion !== undefined && usuario.aceptacion !== null) camposActualizar.aceptacion = usuario.aceptacion;
    if(usuario.genero !== undefined) camposActualizar.genero = usuario.genero;

    const {data, error} = await supabase.from('usuarios').update(camposActualizar).eq('id', id).select()

    if(error) res.status(500).json({error:'Error al actualizar el usuario BACK'})
    if(data.length === 0) res.status(404).json({error:'Usuario no encontrado, BACK'})
      res.json(data[0]) //? Enviamos el usuario actualizado
})



3. CODIGO EN DELETE EN BACKEND.
// //todo: Eliminar usuario por ID: API Docus -> tables & views -> Delete rows
 app.delete("/usuarios/:id", async (req, res) => {
   const id = parseInt(req.params.id);
   const { data, error } = await supabase.from("usuarios").delete().eq("id", id).select();

   if (error) {
     console.error("Error al eliminar usuario", error);
     return res.status(500).json({ error: "Error al eliminar usuario BACK" });
   }

   if (data.length === 0) return res.status(404).json({ error: "Usuario no encontrado" });
   res.status(200).send();
 })























































*****************DESPLIEGUE DEL BACKEND
Una vez que tienes tu backend configurado para usar Supabase (con las variables de entorno, 
rutas que consultan la base de datos y las pol√≠ticas RLS bien definidas), el siguiente paso 
l√≥gico es desplegar tu backend para que est√© disponible p√∫blicamente y tu frontend pueda consumirlo.

Pasos para desplegar tu backend Node.js + Express:
1Ô∏è‚É£Elegir un servicio de hosting para desplegar backend Node.js. Usaremos Render (https://render.com), registrate con GitHub.

2Ô∏è‚É£Preparar tu proyecto para producci√≥n: 
‚úÖConfigura tu backend para leer las variables de entorno (usando dotenv o la configuraci√≥n del host).
‚úÖEn tu package.json, define el script para iniciar el servidor, por ejemplo:
"scripts": {
  "start": "node index.js"
}

3Ô∏è‚É£Subir tu c√≥digo a un repositorio GitHub con "Publish to GitHub", para facilitar despliegues autom√°ticos. 
Entonces, crea un repositorio y sube tu proyecto backend, NO SIN ANTES LLENAR TU file .gitignore

4Ô∏è‚É£Configurar el despliegue en la plataforma Render
1. Crear un nuevo servicio en Render: En el dashboard de Render, en el header haz clic en "New" -> "Web Service" 
-> GitHub. Scroll down -> Only select repositories -> Select repositories -> elige tu repositorio Git donde 
est√° tu backend (por nombre o URL). Render detectar√° que es un proyecto Node.js. -> save || connect
1.1 casillas de info del proyecto: Node, main, npm install, ‚≠ênode index.js‚≠ê, clic on capa Free

2. Scroll down -> Configura las variables de entorno en el panel de Render (pues .env es IGNORADA por GitHub). 
SUPABASE_URL, SUPABASE_ANON_KEY, SUPABASE_ANON_KEY,..., copialas y pegalas, estan en .env de tu proyecto backend-node
Entonces, si usas variables de entorno, aseg√∫rate de tener un archivo .env local para desarrollo y luego 
configurar esas variables en Render.

3. -> Deploy Web Services: Despliega la app y verifica que el backend est√© corriendo.
Tu backend debe escuchar en el puerto que Render asigna, normalmente se usa process.env.PORT:

En la terminal de render, debe aparecer algo como:
==> ///////////////////////////////////////////////////////////
==> 
==> Available at your primary URL https://backend-qi8u.onrender.com
==> 
==> ///////////////////////////////////////////////////////////
==> Detected a new open port HTTP:3001



5Ô∏è‚É£
5. Probar el backend desplegado
Accede a la URL p√∫blica que te da la plataforma, por ejemplo:

text
https://backend-qi8u.onrender.com/‚≠êusuarios‚≠ê
Haz peticiones GET, POST, PUT, DELETE para verificar que todo funciona correctamente.

6. Actualizar el frontend
Cambia la URL de la API en tu frontend para que apunte al backend desplegado.

Por ejemplo:
js
const API_URL = "https://backend-qi8u.onrender.com/usuarios"

üëÄüëÄüëÄüëÄüö©üö©üö©üö©CADA QUE HAGAS CAMBIOS EN TU CODIGO BACKEND, DEBES HACER REDEPLOY EN RENDER DE TU SERVIDOR!!üëÄüëÄüëÄüëÄüëÄüö©üö©üö©üö©üö©
 con clic on -> "Manual Deply", pero antes haz commit en GutHub del cambio !!






######################### CONFIGURACION DEL CORS: ORIGENES ENTRE BACK Y FRONTEND
1Ô∏è‚É£

app.use(cors()) ||   app.use(cors({ origin:'*'}))




2Ô∏è‚É£

app.use(cors({
  origin:'http://127.0.0.1:5501/index.html'
}))



3Ô∏è‚É£
const allowedOrigins = [
  // 'http://127.0.0.1:5501/index.html',
  'http://127.0.0.1:3000/index.html'
]
app.use(cors({
  origin: (origin, callback) => {
    if(!origin || allowedOrigins.includes(origin)) callback(null, true) //*‚úÖPermite acceso
    else callback(new Error('origin no permitido por CORS'), false) //!üö´Denegado acceso
  }

}))



2Ô∏è4Ô∏è‚É£5Ô∏è‚É£6Ô∏è‚É£7Ô∏è‚É£8Ô∏è‚É£9Ô∏è‚É£
